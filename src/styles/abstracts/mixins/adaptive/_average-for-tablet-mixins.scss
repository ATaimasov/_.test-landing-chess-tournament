@use 'shared-breakpoints' as *;
@use '@abstracts/functions/strip-unit-function' as *;
@use 'sass:map';
@use 'sass:list';
@use 'sass:math';


// .example {
//   // Использование с дефолтными брейкпоинтами (md to xl)
//   @include avg-bp('width', 100px, 200px);

//   // Использование с пользовательскими брейкпоинтами
//   @include avg-bp('height', 50px, 150px, 'sm', 'lg');

//   // Использование с указанием среднего значения
//   @include avg-bp('font-size', 14px, 24px, 'xs', 'xxl', 18px);
// }

// Этот обновленный миксин `avg-bp` позволяет:

// 1. Задавать начальный и конечный брейкпоинты из карты `$breakpoints`.
// 2. Использовать все доступные брейкпоинты из карты.
// 3. Опционально указывать среднее значение.
// 4. Выдавать ошибку при использовании несуществующего брейкпоинта.


@mixin avg-bp($property, $start-value, $end-value, $start-breakpoint: 'md', $end-breakpoint: 'xl', $middle-value: null) {
  $start-screen: map.get($breakpoints, $start-breakpoint);
  $end-screen: map.get($breakpoints, $end-breakpoint);

  @if not $start-screen or not $end-screen {
    @error "Invalid breakpoint name. Please use one of: #{map.keys($breakpoints)}";
  }

  & {
    #{$property}: $start-value;
  }

  // Calculation of the middle value, if not specified
  @if $middle-value == null {
    $middle-value: $start-value + ($end-value - $start-value) * 0.5;
  }

     // Calculations moved outside @media
     $start-value-num: strip-unit($start-value);
     $middle-value-num: strip-unit($middle-value);
     $end-value-num: strip-unit($end-value);
     $start-screen-num: strip-unit($start-screen);
     $end-screen-num: strip-unit($end-screen);
 
     $calculated-value: calc(#{$middle-value} + (#{$end-value-num} - #{$middle-value-num}) * (min(100vw, #{$end-screen}) - #{$start-screen}) / (#{$end-screen-num} - #{$start-screen-num}));
 
      @media screen and (min-width: $start-screen) {
        #{$property}: $calculated-value; // Using the pre-calculated value
      }
     
 

  // Fixed value for end breakpoint and above
  @media screen and (min-width: $end-screen) {
    #{$property}: $end-value;
  }
}

//  добавление фиктивного брейкпоинта xxxl и его использование в качестве конечного брейкпоинта для последней пары значений в миксине. Это гарантирует, что последнее значение будет применено корректно.

@mixin avg-bp-multi($property, $values...) {
  $total-pairs: math.floor(math.div(list.length($values), 3));

  @for $i from 1 through $total-pairs {
      $start-index: ($i - 1) * 3 + 1;
      $value: list.nth($values, $start-index);
      $next-value: if($i < $total-pairs, list.nth($values, $start-index + 3), $value);
      $start-breakpoint: list.nth($values, $start-index + 1);
      // Изменение здесь: если это последняя пара, используем фиктивный брейкпойнт
      $end-breakpoint: if($i == $total-pairs, 'xxxl', list.nth($values, $start-index + 2));


      $start-screen: map.get($breakpoints, $start-breakpoint);
      $end-screen: map.get($breakpoints, $end-breakpoint);

      @if not $start-screen or not $end-screen {
          @error "Invalid breakpoint name for pair #{$i}. Please use one of: #{map.keys($breakpoints)}";
      }

      & {
        @if $i == 1 {
          #{$property}: $value;
        }
      }
      

      $start-value-num: strip-unit($value);
      $end-value-num: strip-unit($next-value);
      $start-screen-num: strip-unit($start-screen);
      $end-screen-num: strip-unit($end-screen);

      $calculated-value: calc(#{$value} + (#{$end-value-num} - #{$start-value-num}) * (min(100vw, #{$end-screen}) - #{$start-screen}) / (#{$end-screen-num} - #{$start-screen-num}));

      @media screen and (min-width: $start-screen) {
          #{$property}: $calculated-value;
      }

      @if $i == $total-pairs {
          @media screen and (min-width: $end-screen) {
              #{$property}: $next-value;
          }
      }
  }
}
